import { z } from 'zod';
export declare const cycleTypeEnum: z.ZodEnum<["quarterly", "half_yearly", "annual", "custom"]>;
export declare const cycleStateEnum: z.ZodEnum<["active", "grace_period", "closed"]>;
export declare const reviewTypeEnum: z.ZodEnum<["self", "peer", "manager", "upward"]>;
export declare const reviewStatusEnum: z.ZodEnum<["draft", "submitted", "not_submitted"]>;
export declare const participationStatusEnum: z.ZodEnum<["active", "removed"]>;
export declare const reviewCycleSchema: z.ZodObject<{
    id: z.ZodString;
    title: z.ZodString;
    type: z.ZodEnum<["quarterly", "half_yearly", "annual", "custom"]>;
    startDate: z.ZodDate;
    endDate: z.ZodDate;
    gracePeriodStart: z.ZodOptional<z.ZodDate>;
    gracePeriodEnd: z.ZodOptional<z.ZodDate>;
    isEmergencyCycle: z.ZodBoolean;
    parentCycleId: z.ZodOptional<z.ZodString>;
    state: z.ZodEnum<["active", "grace_period", "closed"]>;
    createdBy: z.ZodString;
    organizationId: z.ZodString;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    organizationId: string;
    type: "custom" | "quarterly" | "half_yearly" | "annual";
    title: string;
    startDate: Date;
    endDate: Date;
    isEmergencyCycle: boolean;
    state: "active" | "grace_period" | "closed";
    createdBy: string;
    gracePeriodStart?: Date | undefined;
    gracePeriodEnd?: Date | undefined;
    parentCycleId?: string | undefined;
}, {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    organizationId: string;
    type: "custom" | "quarterly" | "half_yearly" | "annual";
    title: string;
    startDate: Date;
    endDate: Date;
    isEmergencyCycle: boolean;
    state: "active" | "grace_period" | "closed";
    createdBy: string;
    gracePeriodStart?: Date | undefined;
    gracePeriodEnd?: Date | undefined;
    parentCycleId?: string | undefined;
}>;
export declare const reviewParticipantSchema: z.ZodObject<{
    id: z.ZodString;
    cycleId: z.ZodString;
    userId: z.ZodString;
    participationStatus: z.ZodEnum<["active", "removed"]>;
    joinedAt: z.ZodDate;
    exitedAt: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    id: string;
    cycleId: string;
    userId: string;
    participationStatus: "active" | "removed";
    joinedAt: Date;
    exitedAt?: Date | undefined;
}, {
    id: string;
    cycleId: string;
    userId: string;
    participationStatus: "active" | "removed";
    joinedAt: Date;
    exitedAt?: Date | undefined;
}>;
export declare const reviewSchema: z.ZodObject<{
    id: z.ZodString;
    cycleId: z.ZodString;
    reviewerId: z.ZodString;
    revieweeId: z.ZodString;
    reviewType: z.ZodEnum<["self", "peer", "manager", "upward"]>;
    isAnonymous: z.ZodBoolean;
    content: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    aiGeneratedSuggestion: z.ZodOptional<z.ZodString>;
    summary: z.ZodOptional<z.ZodString>;
    recentFeedbackScore: z.ZodOptional<z.ZodNumber>;
    okrScore: z.ZodOptional<z.ZodNumber>;
    peerFeedbackScore: z.ZodOptional<z.ZodNumber>;
    managerFeedbackScore: z.ZodOptional<z.ZodNumber>;
    selfAssessmentScore: z.ZodOptional<z.ZodNumber>;
    tenureAdjustmentScore: z.ZodOptional<z.ZodNumber>;
    finalAiScore: z.ZodOptional<z.ZodNumber>;
    status: z.ZodEnum<["draft", "submitted", "not_submitted"]>;
    submittedAt: z.ZodOptional<z.ZodDate>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    version: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    status: "draft" | "submitted" | "not_submitted";
    createdAt: Date;
    updatedAt: Date;
    cycleId: string;
    reviewerId: string;
    revieweeId: string;
    reviewType: "manager" | "self" | "peer" | "upward";
    isAnonymous: boolean;
    content: Record<string, unknown>;
    version: number;
    aiGeneratedSuggestion?: string | undefined;
    summary?: string | undefined;
    recentFeedbackScore?: number | undefined;
    okrScore?: number | undefined;
    peerFeedbackScore?: number | undefined;
    managerFeedbackScore?: number | undefined;
    selfAssessmentScore?: number | undefined;
    tenureAdjustmentScore?: number | undefined;
    finalAiScore?: number | undefined;
    submittedAt?: Date | undefined;
}, {
    id: string;
    status: "draft" | "submitted" | "not_submitted";
    createdAt: Date;
    updatedAt: Date;
    cycleId: string;
    reviewerId: string;
    revieweeId: string;
    reviewType: "manager" | "self" | "peer" | "upward";
    isAnonymous: boolean;
    content: Record<string, unknown>;
    version: number;
    aiGeneratedSuggestion?: string | undefined;
    summary?: string | undefined;
    recentFeedbackScore?: number | undefined;
    okrScore?: number | undefined;
    peerFeedbackScore?: number | undefined;
    managerFeedbackScore?: number | undefined;
    selfAssessmentScore?: number | undefined;
    tenureAdjustmentScore?: number | undefined;
    finalAiScore?: number | undefined;
    submittedAt?: Date | undefined;
}>;
export declare const reviewTemplateSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    questions: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    version: z.ZodNumber;
    isActive: z.ZodBoolean;
    createdBy: z.ZodString;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    name: string;
    createdBy: string;
    version: number;
    questions: Record<string, unknown>;
    isActive: boolean;
}, {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    name: string;
    createdBy: string;
    version: number;
    questions: Record<string, unknown>;
    isActive: boolean;
}>;
export declare const createReviewCycleSchema: z.ZodObject<{
    title: z.ZodString;
    type: z.ZodEnum<["quarterly", "half_yearly", "annual", "custom"]>;
    startDate: z.ZodDate;
    endDate: z.ZodDate;
    isEmergencyCycle: z.ZodOptional<z.ZodBoolean>;
    parentCycleId: z.ZodOptional<z.ZodString>;
    organizationId: z.ZodString;
}, "strict", z.ZodTypeAny, {
    organizationId: string;
    type: "custom" | "quarterly" | "half_yearly" | "annual";
    title: string;
    startDate: Date;
    endDate: Date;
    isEmergencyCycle?: boolean | undefined;
    parentCycleId?: string | undefined;
}, {
    organizationId: string;
    type: "custom" | "quarterly" | "half_yearly" | "annual";
    title: string;
    startDate: Date;
    endDate: Date;
    isEmergencyCycle?: boolean | undefined;
    parentCycleId?: string | undefined;
}>;
export declare const updateReviewCycleSchema: z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    startDate: z.ZodOptional<z.ZodDate>;
    endDate: z.ZodOptional<z.ZodDate>;
    gracePeriodStart: z.ZodOptional<z.ZodDate>;
    gracePeriodEnd: z.ZodOptional<z.ZodDate>;
    state: z.ZodOptional<z.ZodEnum<["active", "grace_period", "closed"]>>;
}, "strict", z.ZodTypeAny, {
    title?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    gracePeriodStart?: Date | undefined;
    gracePeriodEnd?: Date | undefined;
    state?: "active" | "grace_period" | "closed" | undefined;
}, {
    title?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    gracePeriodStart?: Date | undefined;
    gracePeriodEnd?: Date | undefined;
    state?: "active" | "grace_period" | "closed" | undefined;
}>;
export declare const createReviewSchema: z.ZodObject<{
    cycleId: z.ZodString;
    reviewerId: z.ZodString;
    revieweeId: z.ZodString;
    reviewType: z.ZodEnum<["self", "peer", "manager", "upward"]>;
    isAnonymous: z.ZodBoolean;
    content: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strict", z.ZodTypeAny, {
    cycleId: string;
    reviewerId: string;
    revieweeId: string;
    reviewType: "manager" | "self" | "peer" | "upward";
    isAnonymous: boolean;
    content: Record<string, unknown>;
}, {
    cycleId: string;
    reviewerId: string;
    revieweeId: string;
    reviewType: "manager" | "self" | "peer" | "upward";
    isAnonymous: boolean;
    content: Record<string, unknown>;
}>;
export declare const updateReviewSchema: z.ZodObject<{
    content: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    status: z.ZodOptional<z.ZodEnum<["draft", "submitted"]>>;
}, "strict", z.ZodTypeAny, {
    status?: "draft" | "submitted" | undefined;
    content?: Record<string, unknown> | undefined;
}, {
    status?: "draft" | "submitted" | undefined;
    content?: Record<string, unknown> | undefined;
}>;
export declare const createReviewTemplateSchema: z.ZodObject<{
    name: z.ZodString;
    questions: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    isActive: z.ZodBoolean;
}, "strict", z.ZodTypeAny, {
    name: string;
    questions: Record<string, unknown>;
    isActive: boolean;
}, {
    name: string;
    questions: Record<string, unknown>;
    isActive: boolean;
}>;
export declare const updateReviewTemplateSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    questions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    isActive: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    name?: string | undefined;
    questions?: Record<string, unknown> | undefined;
    isActive?: boolean | undefined;
}, {
    name?: string | undefined;
    questions?: Record<string, unknown> | undefined;
    isActive?: boolean | undefined;
}>;
export declare const userBasicSchema: z.ZodObject<{
    id: z.ZodString;
    firstName: z.ZodString;
    lastName: z.ZodString;
    email: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
}, {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
}>;
export declare const reviewCycleWithRelationsSchema: z.ZodObject<{
    id: z.ZodString;
    title: z.ZodString;
    type: z.ZodEnum<["quarterly", "half_yearly", "annual", "custom"]>;
    startDate: z.ZodDate;
    endDate: z.ZodDate;
    gracePeriodStart: z.ZodOptional<z.ZodDate>;
    gracePeriodEnd: z.ZodOptional<z.ZodDate>;
    isEmergencyCycle: z.ZodBoolean;
    parentCycleId: z.ZodOptional<z.ZodString>;
    state: z.ZodEnum<["active", "grace_period", "closed"]>;
    createdBy: z.ZodString;
    organizationId: z.ZodString;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
} & {
    participants: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        cycleId: z.ZodString;
        userId: z.ZodString;
        participationStatus: z.ZodEnum<["active", "removed"]>;
        joinedAt: z.ZodDate;
        exitedAt: z.ZodOptional<z.ZodDate>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        cycleId: string;
        userId: string;
        participationStatus: "active" | "removed";
        joinedAt: Date;
        exitedAt?: Date | undefined;
    }, {
        id: string;
        cycleId: string;
        userId: string;
        participationStatus: "active" | "removed";
        joinedAt: Date;
        exitedAt?: Date | undefined;
    }>, "many">;
    reviews: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        cycleId: z.ZodString;
        reviewerId: z.ZodString;
        revieweeId: z.ZodString;
        reviewType: z.ZodEnum<["self", "peer", "manager", "upward"]>;
        isAnonymous: z.ZodBoolean;
        content: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        aiGeneratedSuggestion: z.ZodOptional<z.ZodString>;
        summary: z.ZodOptional<z.ZodString>;
        recentFeedbackScore: z.ZodOptional<z.ZodNumber>;
        okrScore: z.ZodOptional<z.ZodNumber>;
        peerFeedbackScore: z.ZodOptional<z.ZodNumber>;
        managerFeedbackScore: z.ZodOptional<z.ZodNumber>;
        selfAssessmentScore: z.ZodOptional<z.ZodNumber>;
        tenureAdjustmentScore: z.ZodOptional<z.ZodNumber>;
        finalAiScore: z.ZodOptional<z.ZodNumber>;
        status: z.ZodEnum<["draft", "submitted", "not_submitted"]>;
        submittedAt: z.ZodOptional<z.ZodDate>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
        version: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        status: "draft" | "submitted" | "not_submitted";
        createdAt: Date;
        updatedAt: Date;
        cycleId: string;
        reviewerId: string;
        revieweeId: string;
        reviewType: "manager" | "self" | "peer" | "upward";
        isAnonymous: boolean;
        content: Record<string, unknown>;
        version: number;
        aiGeneratedSuggestion?: string | undefined;
        summary?: string | undefined;
        recentFeedbackScore?: number | undefined;
        okrScore?: number | undefined;
        peerFeedbackScore?: number | undefined;
        managerFeedbackScore?: number | undefined;
        selfAssessmentScore?: number | undefined;
        tenureAdjustmentScore?: number | undefined;
        finalAiScore?: number | undefined;
        submittedAt?: Date | undefined;
    }, {
        id: string;
        status: "draft" | "submitted" | "not_submitted";
        createdAt: Date;
        updatedAt: Date;
        cycleId: string;
        reviewerId: string;
        revieweeId: string;
        reviewType: "manager" | "self" | "peer" | "upward";
        isAnonymous: boolean;
        content: Record<string, unknown>;
        version: number;
        aiGeneratedSuggestion?: string | undefined;
        summary?: string | undefined;
        recentFeedbackScore?: number | undefined;
        okrScore?: number | undefined;
        peerFeedbackScore?: number | undefined;
        managerFeedbackScore?: number | undefined;
        selfAssessmentScore?: number | undefined;
        tenureAdjustmentScore?: number | undefined;
        finalAiScore?: number | undefined;
        submittedAt?: Date | undefined;
    }>, "many">;
    parentCycle: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        type: z.ZodEnum<["quarterly", "half_yearly", "annual", "custom"]>;
        startDate: z.ZodDate;
        endDate: z.ZodDate;
        gracePeriodStart: z.ZodOptional<z.ZodDate>;
        gracePeriodEnd: z.ZodOptional<z.ZodDate>;
        isEmergencyCycle: z.ZodBoolean;
        parentCycleId: z.ZodOptional<z.ZodString>;
        state: z.ZodEnum<["active", "grace_period", "closed"]>;
        createdBy: z.ZodString;
        organizationId: z.ZodString;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        organizationId: string;
        type: "custom" | "quarterly" | "half_yearly" | "annual";
        title: string;
        startDate: Date;
        endDate: Date;
        isEmergencyCycle: boolean;
        state: "active" | "grace_period" | "closed";
        createdBy: string;
        gracePeriodStart?: Date | undefined;
        gracePeriodEnd?: Date | undefined;
        parentCycleId?: string | undefined;
    }, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        organizationId: string;
        type: "custom" | "quarterly" | "half_yearly" | "annual";
        title: string;
        startDate: Date;
        endDate: Date;
        isEmergencyCycle: boolean;
        state: "active" | "grace_period" | "closed";
        createdBy: string;
        gracePeriodStart?: Date | undefined;
        gracePeriodEnd?: Date | undefined;
        parentCycleId?: string | undefined;
    }>>;
    template: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        questions: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        version: z.ZodNumber;
        isActive: z.ZodBoolean;
        createdBy: z.ZodString;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        createdBy: string;
        version: number;
        questions: Record<string, unknown>;
        isActive: boolean;
    }, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        createdBy: string;
        version: number;
        questions: Record<string, unknown>;
        isActive: boolean;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    organizationId: string;
    type: "custom" | "quarterly" | "half_yearly" | "annual";
    title: string;
    startDate: Date;
    endDate: Date;
    isEmergencyCycle: boolean;
    state: "active" | "grace_period" | "closed";
    createdBy: string;
    participants: {
        id: string;
        cycleId: string;
        userId: string;
        participationStatus: "active" | "removed";
        joinedAt: Date;
        exitedAt?: Date | undefined;
    }[];
    reviews: {
        id: string;
        status: "draft" | "submitted" | "not_submitted";
        createdAt: Date;
        updatedAt: Date;
        cycleId: string;
        reviewerId: string;
        revieweeId: string;
        reviewType: "manager" | "self" | "peer" | "upward";
        isAnonymous: boolean;
        content: Record<string, unknown>;
        version: number;
        aiGeneratedSuggestion?: string | undefined;
        summary?: string | undefined;
        recentFeedbackScore?: number | undefined;
        okrScore?: number | undefined;
        peerFeedbackScore?: number | undefined;
        managerFeedbackScore?: number | undefined;
        selfAssessmentScore?: number | undefined;
        tenureAdjustmentScore?: number | undefined;
        finalAiScore?: number | undefined;
        submittedAt?: Date | undefined;
    }[];
    gracePeriodStart?: Date | undefined;
    gracePeriodEnd?: Date | undefined;
    parentCycleId?: string | undefined;
    parentCycle?: {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        organizationId: string;
        type: "custom" | "quarterly" | "half_yearly" | "annual";
        title: string;
        startDate: Date;
        endDate: Date;
        isEmergencyCycle: boolean;
        state: "active" | "grace_period" | "closed";
        createdBy: string;
        gracePeriodStart?: Date | undefined;
        gracePeriodEnd?: Date | undefined;
        parentCycleId?: string | undefined;
    } | undefined;
    template?: {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        createdBy: string;
        version: number;
        questions: Record<string, unknown>;
        isActive: boolean;
    } | undefined;
}, {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    organizationId: string;
    type: "custom" | "quarterly" | "half_yearly" | "annual";
    title: string;
    startDate: Date;
    endDate: Date;
    isEmergencyCycle: boolean;
    state: "active" | "grace_period" | "closed";
    createdBy: string;
    participants: {
        id: string;
        cycleId: string;
        userId: string;
        participationStatus: "active" | "removed";
        joinedAt: Date;
        exitedAt?: Date | undefined;
    }[];
    reviews: {
        id: string;
        status: "draft" | "submitted" | "not_submitted";
        createdAt: Date;
        updatedAt: Date;
        cycleId: string;
        reviewerId: string;
        revieweeId: string;
        reviewType: "manager" | "self" | "peer" | "upward";
        isAnonymous: boolean;
        content: Record<string, unknown>;
        version: number;
        aiGeneratedSuggestion?: string | undefined;
        summary?: string | undefined;
        recentFeedbackScore?: number | undefined;
        okrScore?: number | undefined;
        peerFeedbackScore?: number | undefined;
        managerFeedbackScore?: number | undefined;
        selfAssessmentScore?: number | undefined;
        tenureAdjustmentScore?: number | undefined;
        finalAiScore?: number | undefined;
        submittedAt?: Date | undefined;
    }[];
    gracePeriodStart?: Date | undefined;
    gracePeriodEnd?: Date | undefined;
    parentCycleId?: string | undefined;
    parentCycle?: {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        organizationId: string;
        type: "custom" | "quarterly" | "half_yearly" | "annual";
        title: string;
        startDate: Date;
        endDate: Date;
        isEmergencyCycle: boolean;
        state: "active" | "grace_period" | "closed";
        createdBy: string;
        gracePeriodStart?: Date | undefined;
        gracePeriodEnd?: Date | undefined;
        parentCycleId?: string | undefined;
    } | undefined;
    template?: {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        createdBy: string;
        version: number;
        questions: Record<string, unknown>;
        isActive: boolean;
    } | undefined;
}>;
export declare const reviewWithRelationsSchema: z.ZodObject<{
    id: z.ZodString;
    cycleId: z.ZodString;
    reviewerId: z.ZodString;
    revieweeId: z.ZodString;
    reviewType: z.ZodEnum<["self", "peer", "manager", "upward"]>;
    isAnonymous: z.ZodBoolean;
    content: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    aiGeneratedSuggestion: z.ZodOptional<z.ZodString>;
    summary: z.ZodOptional<z.ZodString>;
    recentFeedbackScore: z.ZodOptional<z.ZodNumber>;
    okrScore: z.ZodOptional<z.ZodNumber>;
    peerFeedbackScore: z.ZodOptional<z.ZodNumber>;
    managerFeedbackScore: z.ZodOptional<z.ZodNumber>;
    selfAssessmentScore: z.ZodOptional<z.ZodNumber>;
    tenureAdjustmentScore: z.ZodOptional<z.ZodNumber>;
    finalAiScore: z.ZodOptional<z.ZodNumber>;
    status: z.ZodEnum<["draft", "submitted", "not_submitted"]>;
    submittedAt: z.ZodOptional<z.ZodDate>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    version: z.ZodNumber;
} & {
    cycle: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        type: z.ZodEnum<["quarterly", "half_yearly", "annual", "custom"]>;
        startDate: z.ZodDate;
        endDate: z.ZodDate;
        gracePeriodStart: z.ZodOptional<z.ZodDate>;
        gracePeriodEnd: z.ZodOptional<z.ZodDate>;
        isEmergencyCycle: z.ZodBoolean;
        parentCycleId: z.ZodOptional<z.ZodString>;
        state: z.ZodEnum<["active", "grace_period", "closed"]>;
        createdBy: z.ZodString;
        organizationId: z.ZodString;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        organizationId: string;
        type: "custom" | "quarterly" | "half_yearly" | "annual";
        title: string;
        startDate: Date;
        endDate: Date;
        isEmergencyCycle: boolean;
        state: "active" | "grace_period" | "closed";
        createdBy: string;
        gracePeriodStart?: Date | undefined;
        gracePeriodEnd?: Date | undefined;
        parentCycleId?: string | undefined;
    }, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        organizationId: string;
        type: "custom" | "quarterly" | "half_yearly" | "annual";
        title: string;
        startDate: Date;
        endDate: Date;
        isEmergencyCycle: boolean;
        state: "active" | "grace_period" | "closed";
        createdBy: string;
        gracePeriodStart?: Date | undefined;
        gracePeriodEnd?: Date | undefined;
        parentCycleId?: string | undefined;
    }>;
    reviewer: z.ZodObject<{
        id: z.ZodString;
        firstName: z.ZodString;
        lastName: z.ZodString;
        email: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
    }, {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
    }>;
    reviewee: z.ZodObject<{
        id: z.ZodString;
        firstName: z.ZodString;
        lastName: z.ZodString;
        email: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
    }, {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
    }>;
}, "strip", z.ZodTypeAny, {
    id: string;
    status: "draft" | "submitted" | "not_submitted";
    createdAt: Date;
    updatedAt: Date;
    cycleId: string;
    reviewerId: string;
    revieweeId: string;
    reviewType: "manager" | "self" | "peer" | "upward";
    isAnonymous: boolean;
    content: Record<string, unknown>;
    version: number;
    cycle: {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        organizationId: string;
        type: "custom" | "quarterly" | "half_yearly" | "annual";
        title: string;
        startDate: Date;
        endDate: Date;
        isEmergencyCycle: boolean;
        state: "active" | "grace_period" | "closed";
        createdBy: string;
        gracePeriodStart?: Date | undefined;
        gracePeriodEnd?: Date | undefined;
        parentCycleId?: string | undefined;
    };
    reviewer: {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
    };
    reviewee: {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
    };
    aiGeneratedSuggestion?: string | undefined;
    summary?: string | undefined;
    recentFeedbackScore?: number | undefined;
    okrScore?: number | undefined;
    peerFeedbackScore?: number | undefined;
    managerFeedbackScore?: number | undefined;
    selfAssessmentScore?: number | undefined;
    tenureAdjustmentScore?: number | undefined;
    finalAiScore?: number | undefined;
    submittedAt?: Date | undefined;
}, {
    id: string;
    status: "draft" | "submitted" | "not_submitted";
    createdAt: Date;
    updatedAt: Date;
    cycleId: string;
    reviewerId: string;
    revieweeId: string;
    reviewType: "manager" | "self" | "peer" | "upward";
    isAnonymous: boolean;
    content: Record<string, unknown>;
    version: number;
    cycle: {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        organizationId: string;
        type: "custom" | "quarterly" | "half_yearly" | "annual";
        title: string;
        startDate: Date;
        endDate: Date;
        isEmergencyCycle: boolean;
        state: "active" | "grace_period" | "closed";
        createdBy: string;
        gracePeriodStart?: Date | undefined;
        gracePeriodEnd?: Date | undefined;
        parentCycleId?: string | undefined;
    };
    reviewer: {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
    };
    reviewee: {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
    };
    aiGeneratedSuggestion?: string | undefined;
    summary?: string | undefined;
    recentFeedbackScore?: number | undefined;
    okrScore?: number | undefined;
    peerFeedbackScore?: number | undefined;
    managerFeedbackScore?: number | undefined;
    selfAssessmentScore?: number | undefined;
    tenureAdjustmentScore?: number | undefined;
    finalAiScore?: number | undefined;
    submittedAt?: Date | undefined;
}>;
export type CycleType = z.infer<typeof cycleTypeEnum>;
export type CycleState = z.infer<typeof cycleStateEnum>;
export type ReviewType = z.infer<typeof reviewTypeEnum>;
export type ReviewStatus = z.infer<typeof reviewStatusEnum>;
export type ParticipationStatus = z.infer<typeof participationStatusEnum>;
export type ReviewCycle = z.infer<typeof reviewCycleSchema>;
export type ReviewParticipant = z.infer<typeof reviewParticipantSchema>;
export type Review = z.infer<typeof reviewSchema>;
export type ReviewTemplate = z.infer<typeof reviewTemplateSchema>;
export type CreateReviewCycleRequest = z.infer<typeof createReviewCycleSchema>;
export type UpdateReviewCycleRequest = z.infer<typeof updateReviewCycleSchema>;
export type CreateReviewRequest = z.infer<typeof createReviewSchema>;
export type UpdateReviewRequest = z.infer<typeof updateReviewSchema>;
export type CreateReviewTemplateRequest = z.infer<typeof createReviewTemplateSchema>;
export type UpdateReviewTemplateRequest = z.infer<typeof updateReviewTemplateSchema>;
export type ReviewCycleWithRelations = z.infer<typeof reviewCycleWithRelationsSchema>;
export type ReviewWithRelations = z.infer<typeof reviewWithRelationsSchema>;
